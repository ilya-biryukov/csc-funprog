{-- Домашнее задание № 6. Задача 1. Бирюков Илья, CS Center, отделение SE
 - Написать функцию diameter :: Graph -> Int, которая вычисляет диаметр связного
 - неориентированного графа - наибольшее из минимальных расстояний между всеми
 - парами вершин.
 -}


type Graph = (Int, Int -> Int -> Bool)

{--
 - Вспомогательная функция. Выдаёт список вершин графа,смежных с переданной.
 -
 - Аргументы:
 -    n Номер вершины в графе, для которой нужно выдать смежные вершины
 -    graph Сам граф
 -
 - Возвращает:
 -    Список вершин, смежных переданной
 -}
-- Выдаём те вершины, для которых функция проверки существования ребра ответит `да`
adjacentNodes :: Int -> Graph -> [Int]
adjacentNodes n (vs, edgeTest) = filter (\x -> edgeTest n x) [1..vs]

{-- Вспомогательная функция, вычисляет максимальное из кратчайших расстояний от
 - переданной вершины до всех остальных
 -
 -  Аргументы:
 -    graph Граф, на котором нужно запускать BFS
 -    v Вершина, расстояние от которой нужно посчитать
 -
 -  Возвращает:
 -    Максимальное из кратчайших расстояний от переданной вершины до всех остальных
 -}
maxDist :: Graph -> Int -> Int
maxDist graph v = maxDist' [(v, 0)] [] 0
    where
    -- Возвращает максимальное расстояние, найденное просмотром графом
    -- ``в ширину''
    -- Первый параметр - очередь непросмотренных вершин(в виде (пара, расстояние))
    -- Второй параметр - список уже просмотренных вершин
    -- Третий параметр - текущее значение максимального расстояния
    maxDist' [] _ currentMax = currentMax
    maxDist' ((node, dist): queue) visited currentMax
      = maxDist' newQueue (node: visited) newMax
      where
      newQueue = queue ++ newNodes
      -- Добавляем в очередь вершины, смежные с данной, но ещё не посещённые.
      -- Их расстояние - расстояние до данной вершины, увеличенное на единицу
      newNodes = map setDist $ filter notVisited $ adjacentNodes node graph
      newMax = max currentMax dist
      notVisited x = x `notElem` visited
      setDist x = (x, dist + 1)


diameter :: Graph -> Int
diameter graph@(n, _) = maximum $ map (maxDist graph) [1..n]

-- Входные данные для тестов
testInput = [
  -- У графа из одной вершины диаметр = 0
  (1, \x y -> x /= y),
  -- Две вершины и ребро между ними
  (2, \x y -> x /= y),
  -- Треугольник
  (3, \x y -> x /= y),
  -- Граф с большим диаметром
  (10, \x y -> x == y + 1 || y == x + 1),
  -- Граф с большим диаметром и большим кол-ом вершин
  (50, \x y -> x == y + 1 || y == x + 1),
  -- Полный граф на 50 вершинах. Тест на скорость работы
  (50, \x y -> x /= y)
  --
  ]

-- Ожидаемые результаты тестов
results = [
  0,
  1,
  2,
  9,
  49,
  2
  ]

-- Результат всех тестов
test = results == map diameter testInput


-- Результаты отдельных тестов
testDetail = zipWith (==) results $ map diameter testInput
