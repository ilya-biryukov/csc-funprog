{-- Домашнее задание № 4. Задача 4. Бирюков Илья, CS Center, отделение SE.
 -    Бесконечная матрица содержит все натуральные числа в "диагональном" порядке:
 -  [[ 1,  2,  4,  7, 11, ...],
 -  [ 3,  5,  8, 12, 17, ...],
 -  [ 6,  9, 13, 18, 24, ...],
 -  [10, 14, 19, 25, 32, ...],
 -  ...]
 -
 -    Построить заданную матрицу (написать соответствующее выражение) и написать функцию,
 -  вычисляющую сумму ее элементов, лежащих в левом верхнем квадрате размером N x N.
 -  Функция должна получать N в качестве аргумента и использовать построенный список
 -  списков в качестве глобального для этой функции объекта.
 -}
type IntMatrix = [[Integer]]

-- Бесконечная матрица, которую необходимо построить
infMatrix :: IntMatrix
infMatrix = iterate nextRow firstRow
    where
        -- Первую строку матрицы можно получить прибавив 1 к каждому
        -- элементу последовательности частичных сумм бесконечной
        -- арифм. прогресиии [0, 1..]
        firstRow = map (+1) $ scanl1 (+) [0..]
        -- А каждую следующую строку матрицы можно получить из предыдующей, отбрасыванием
        -- первого элемента предыдущей и прибавлением к оставшимся элементам 1.
        nextRow row = map (+1) $ tail row


{--
 -  Считает сумму верхнего левого квадрата N x N полученной бесконечной матрицы
 -
 -  Аргументы:
 -      n - размер квадрата, в котором необходимо посчитать сумму
 -
 -  Возвращает:
 -      Сумму элементов матрицы, стоящих в верхнем левом верхнем квадрате матрицы
 -      infMatrix, размером n строк и n столбцов.
 -}
upperLeftSum :: Int -> Integer
upperLeftSum n = sum (take n rowSums)
    where rowSums = map (sum . take n) infMatrix



-- Входные данные для тестов
testInput = [
  0,
  1,
  2,
  3,
  4
  ]

-- Ожидаемый результат
results = [
  0,
  1,
  11,
  51,
  119 + 18 + 12 + 7 -- Дальше считать вручную сложно
  ]

-- Кусок матрицы из примера
expectedMatrixPart =
  [[ 1,  2,  4,  7, 11],
   [ 3,  5,  8, 12, 17],
   [ 6,  9, 13, 18, 24],
   [10, 14, 19, 25, 32]
   ]
matrixPart = take 4 $ map (take 5) infMatrix


-- True, если тесты пройдены и False в обратном случае
test = expectedMatrixPart == matrixPart && results == map upperLeftSum testInput

-- Более подробная информация по тестам
testDetail = (expectedMatrixPart == matrixPart) :
    zipWith (==) results (map upperLeftSum testInput)
