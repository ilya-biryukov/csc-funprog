{-- Домашнее задание № 4. Задача 2. Бирюков Илья, CS Center, отделение SE
 -
 -  Бесконечная упорядоченная последовательность целых чисел без повторений составлена
 -  из всех квадратов, кубов и факториалов натуральных чисел.
 -
 -  Написать программу для вычисления n-го члена этой последовательности.
 -}



{-- Бесконечная отсортированная последовательность из квадратов, кубов и факториалов
 -  натуральных чисел (без повторений)
 -}
ourSequence = unique $ merge3 squares cubes factorials
    where
        squares = map (^2) [1..]
        cubes = map (^3) [1..]
        factorials = scanl1 (*) [1..]
        -- Сливает три отсторированных списка
        merge3 x y z = merge x $ merge y z
        -- Сливает два отсортированных списка в новый отсортированный список
        merge [] list = list
        merge list [] = list
        merge list1@(x: xs) list2@(y: ys)
            | x < y = x : merge xs list2
            | otherwise = y : merge list1 ys
        -- Удаляет повторы из отсортированного списка
        unique (x:xs@(y:ys))
            | x == y = unique xs
            | otherwise = x : unique xs

{--
 - Вычисляет n-ый элемент последовательности ourSequence
 -
 - Аргументы:
 -    n Номер элемента последовательности, который необходимо получить
 -      (индексация начинается с 0)
 -
 - Возвращает:
 -    n-ый элемент последовательности ourSequence
 -}
nthElement :: Int -> Integer
nthElement n = ourSequence !! n


-- Входные данные для тестов
testInput = [
  13
  ]

-- Ожидаемые результаты тестов
results = [
  [1, 2, 4, 6, 8, 9, 16, 24, 25, 27, 36, 49, 64]
  ]

-- Проверим на совпадение первые 13 членов последовательности
-- (больше считать вручную долго)
-- True, если тесты пройдены, иначе False
test = results == map (flip take ourSequence) testInput
